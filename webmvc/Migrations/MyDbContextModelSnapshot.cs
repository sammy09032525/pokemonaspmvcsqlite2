// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webmvc.Infrastructure;

#nullable disable

namespace webmvc.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Ability>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<Ability>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Generation>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<Generation>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Item>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<Item>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Move>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.MoveLearnMethod>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<MoveLearnMethod>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.PokemonForm>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<PokemonForm>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.PokemonSpecies>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<PokemonSpecies>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Stat>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<Stat>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Type>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<Type>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.Version>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<Version>");
                });

            modelBuilder.Entity("PokeApiNet.NamedApiResource<PokeApiNet.VersionGroup>", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("NamedApiResource<VersionGroup>");
                });

            modelBuilder.Entity("PokeApiNet.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Integer")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItem", b =>
                {
                    b.ToTable("PokemonHeldItem", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("PokeApiNet.PokemonHeldItemVersion", b =>
                {
                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.ToTable("PokemonHeldItemVersion");
                });

            modelBuilder.Entity("PokeApiNet.PokemonMove", b =>
                {
                    b.ToTable("PokemonMove", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("PokeApiNet.PokemonMoveVersion", b =>
                {
                    b.Property<int>("LevelLearnedAt")
                        .HasColumnType("INTEGER");

                    b.ToTable("PokemonMoveVersion");
                });

            modelBuilder.Entity("PokeApiNet.PokemonPastTypes", b =>
                {
                    b.ToTable("PokemonPastTypes", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("PokeApiNet.PokemonStat", b =>
                {
                    b.Property<int>("BaseStat")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Effort")
                        .HasColumnType("INTEGER");

                    b.ToTable("PokemonStat");
                });

            modelBuilder.Entity("PokeApiNet.PokemonType", b =>
                {
                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER");

                    b.ToTable("PokemonType");
                });

            modelBuilder.Entity("PokeApiNet.VersionGameIndex", b =>
                {
                    b.Property<int>("GameIndex")
                        .HasColumnType("INTEGER");

                    b.ToTable("VersionGameIndex");
                });

            modelBuilder.Entity("webmvc.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
